import filecmp
import os
import subprocess

import pytest

TESTS_DIR = os.path.dirname(os.path.realpath(__file__))
INPUT_DIR = os.path.join(TESTS_DIR, "data", "trace_filter", "IN")
OUTPUT_DIR = os.path.join(TESTS_DIR, "data", "trace_filter", "OUT")


def check_script_run_normally(result, gen_out_path, filtered, expected):
    assert result.returncode == 0, f"Runtime error: {result.stderr}"
    assert os.path.exists(gen_out_path), f"Output file {filtered} isn't created"
    assert filecmp.cmp(
        gen_out_path, expected, shallow=False
    ), f"Difference detected between {gen_out_path} and {expected}"


INPUT_NPY = INPUT_DIR + os.sep + "n_cells_250_pwd_sc_matrix.npy"
INPUT_ECSV = INPUT_DIR + os.sep + "unique_barcodes.ecsv"


def test_trace_filter_input():
    # Determine output file that should be generated by the script
    filtered_filename = "TODO"
    generated_output_path = os.path.join(INPUT_DIR, filtered_filename)
    expected_output_path = os.path.join(OUTPUT_DIR, filtered_filename)

    # Delete old filtered file if exist to avoid conflict
    if os.path.exists(generated_output_path):
        os.remove(generated_output_path)

    # Run script with CLI
    result = subprocess.run(
        ["figure_him_matrix", "--input", INPUT_NPY],
        capture_output=True,
        text=True,
    )
    check_script_run_normally(
        result, generated_output_path, filtered_filename, expected_output_path
    )
    os.remove(generated_output_path)
